思路和心得：

# （一）无技巧地模拟

1.数据范围很小。直接模拟即可

* []

```python3
class Solution:
    def isThree(self, n: int) -> bool:
        cnt = 0
        for x in range(1, n + 1):
            if n % x == 0:
                cnt += 1
                if cnt > 3:
                    break
        return cnt == 3
```

* []

```c++
class Solution 
{
public:
    bool isThree(int n) 
    {
        int cnt = 0;
        for (int i = 1; i < n + 1; i ++)
        {
            if (n % i == 0)
            {
                cnt ++;
                if (cnt > 3)
                    break;
            }
        }
        return cnt == 3;
    }
};
```

* []

```java
class Solution 
{
    public boolean isThree(int n) 
    {
        int cnt = 0;
        for (int x = 1; x < n + 1; x ++)
        {
            if (n % x == 0)
            {
                cnt ++;
                if (cnt > 3)
                    break;
            }
        }

        return cnt == 3;
    }
}
```

# （二）缩小范围的模拟

* []

```python3
class Solution:
    def isThree(self, n: int) -> bool:
        cnt = 0
        max_num = int(n ** 0.5)
        for x in range(1, max_num):
            if n % x == 0:
                cnt += 2
                if cnt > 3:
                    break
        if max_num ** 2 == n:
            cnt += 1
        return cnt == 3
```

* []

```c++
class Solution 
{
public:
    bool isThree(int n) 
    {
        int cnt = 0;
        int max_num = int(pow(n, 0.5));
        for (int i = 1; i < max_num; i ++)
        {
            if (n % i == 0)
            {
                cnt += 2;
                if (cnt > 3)
                    break;
            }
        }
        if (max_num * max_num == n)
            cnt ++;
        return cnt == 3;
    }
};
```

* []

```java
class Solution 
{
    public boolean isThree(int n) 
    {
        int cnt = 0;
        int max_num = (int)Math.pow(n, 0.5);
        for (int x = 1; x < max_num; x ++)
        {
            if (n % x == 0)
            {
                cnt += 2;
                if (cnt > 3)
                    break;
            }
        }
        if (max_num * max_num == n)
            cnt ++;
        return cnt == 3;
    }
}
```


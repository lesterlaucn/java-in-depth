大家好呀，我是在爬二叉树的帅蛋。

二叉树遍历的实现历来是面试的高频问题，关于二叉树的前中后序遍历有两种实现方式：递归和非递归。

递归实现起来简单一些，而非递归的实现需要借助之前讲过的【栈】这个数据结构

这两种实现方式都需要蛋粉们牢牢掌握，我们直接开始！

# 二叉树中序遍历（递归版）

## LeetCode 94：二叉树的中序遍历

给你二叉树根节点 root，返回它的中序遍历。

## 示例

![bcaae8776e2ec4116d6049d566b08ef](https://pic.leetcode-cn.com/1645497945-KsqijM-20220123_094455714_0.jpg)

输入：root = [1,null,2,3]

输出：[1,3,2]

## 解析

关于递归，我之前写过一篇很详细的文章：

<br />

[**ACM 选手带你玩转递归算法！**](http://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&mid=2475925238&idx=1&sn=ea7eafee3e61b433642312f33a5a2413&chksm=ff22f97bc855706d385c42fbb5132da5c7a2a53a2ca59e6a475f7ccfb3c2dc69195f6716e58a&scene=21#wechat_redirect)

<br />

没看过的蛋粉可以看一下。

说白了**递归就是一种循环，一种自己调用自己的循环**。

一道题你看**能不能用递归实现，需要具备两个条件**：

- 问题可以分为多个重复的子问题，子问题仅存在数据规模的差距。
- 存在终止条件。

所以根据条件，对于**实现递归，只需要两步**：

- 找出重复的子问题（递推公式）。
- 终止条件。

根据上面讲的实现递归的两步来找：

### (1) 找出重复的子问题

中序遍历的顺序是：左子树、根、右子树。

对于左子树、右子树来说，也是同样的遍历顺序。

所以这个重复的子问题就是：**先遍历左子树、再取根节点，最后遍历右子树**。

* Python

```Python
inOrder(root.left)
print(root.val)
inOrder(root.right)
```

### (2) 确定终止条件

和前序遍历相同，就是当前的节点为空，空的没啥好遍历的。

* Python

```Python
if root == None:
    return 
```

最重要的两点确定完了，那总的代码也就出来了。

## 代码实现

### Python 代码实现

* Python

```Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

    def inOrder(self, root:TreeNode, res):
        if root == None:
            return
        self.inOrder(root.left, res)
        res.append(root.val)
        self.inOrder(root.right, res)

    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res = []
        self.inOrder(root, res)
        return res
```

### Java 代码实现

* Java

```Java
class Solution {

    public void inOrder(TreeNode root, List<Integer> res) {
        if (root == null) {
            return;
        }
        inOrder(root.left, res);
        res.add(root.val);
        inOrder(root.right, res);
    }
    
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        inOrder(root, res);
        return res;
    }
}
```

和前序遍历相同，中序遍历**时间复杂度为 O(n)**，**空间复杂度为 O(n)**。

# 二叉树中序遍历（非递归版）

## LeetCode 94：二叉树的中序遍历

给你二叉树根节点 root，返回它的中序遍历。

## 示例

![3c007c78e156510c9c02599ad6246b8](https://pic.leetcode-cn.com/1645497945-nHWaBY-20220123_101103729_0.jpg)

输入：root = [1,null,2,3]

输出：[1,3,2]

## 解析

非递归的做法，很多人又叫**迭代法**。**迭代法就是不断地将旧的变量值，递推计算新的变量值**。

迭代法是怎么做呢？不卖关子，是用栈来做。

我简单给大家讲一下为什么可以用“栈”。

这个其实还是因为二叉树的前中后序遍历能用“递归”。举一个简单点的例子，下面的图是一个递归函数的运作：

![d6d78dd82b6ff926cfd7b373eb42e84](https://pic.leetcode-cn.com/1645408335-nzuevy-20220205_182523234_20.jpg)

我想求 f(3)，就得知道 f(2)，那 f(2) 怎么求，当然得知道 f(1) 是啥...

你看我最先想要求的数，反而是最后才知道。

你有没有觉得这个和“我最先进去的数，反而是最后才出来”很像？这个先入后出，不就正是“栈”嘛！

没错，**递归问题的处理，可以用栈来解决**。

破案了！递归的时候竟然是隐式的维护了一个栈！没想到你竟是这样的递归！

那我们**把这个栈光明正大的模拟出来就是迭代法了**。

请喊我大聪明。

![b6f1c01d7f262ad84f873433075c491](https://pic.leetcode-cn.com/1645408335-LpINlV-20220123_100406162_0.jpg)

如果有小婊贝还不知道栈是个什么玩意儿，麻烦先来一句“蛋蛋真帅”，再看下文：

<br />

[ACM 选手带你玩转栈和队列](http://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&mid=2475919772&idx=1&sn=8574188f72d892d501f15956b6a2a629&chksm=ff22ee11c8556707dd6d5af977125ce6698ebbcfaa3b9083e14c3658d2975761079a9c2082a4&scene=21#wechat_redirect)

<br />

中序遍历的非递归就没前序遍历那么好搞了。

前序遍历是先搞根节点，再去管左子树，右子树，这就意味着，在**前序遍历中你遍历节点的顺序和你处理节点的顺序是一致的**。

这句话你要仔细品，很重要。

而中序遍历的顺序是：左子树、根、右子树，先输出左子树，再输出根节点，最后输出右子树。

这就意味着，在**中序遍历中，访问节点的顺序和处理节点的顺序是不一致的**，并且，**处理节点是在遍历完左子树之后**。

再直白点就是：**从根节点开始，一层层的遍历，找到左子树最左的那个节点，从它开始处理节点。**

例如下图中的 H 节点。

![fab0544d922903ca1320451d981dfaf](https://pic.leetcode-cn.com/1645497945-yQGDlT-20220123_101153073_0.jpg)

**具体步骤**如下所示：

- 初始化一个空栈。

- 当【根节点不为空】或者【栈不为空】时，从根节点开始

- - 若当前节点有左子树，一直遍历左子树，每次将当前节点压入栈中。
  - 若当前节点无左子树，从栈中弹出该节点，尝试访问该节点的右子树。

## 图解

以下图为例：

![fde3db22795b1f35a10746044445352](https://pic.leetcode-cn.com/1645497945-laRsSm-20220123_101249024_0.jpg)

首先初始化一个空栈。

![6e19bd51c0d5a445271211f100f5a2f](https://pic.leetcode-cn.com/1645497945-ftRKCe-20220123_101306407_0.jpg)

* Python

```Python
stack = []
```

从根节点开始，一直向左子树遍历，同时将当前的节点压入栈中。

![2849496fd6383c444e99c6f8e112560](https://pic.leetcode-cn.com/1645497945-ZvznFx-20220123_101350141_0.jpg)

![68d567f94523782b1985ba96005cde8](https://pic.leetcode-cn.com/1645497945-MDXHPg-20220123_101403622_0.jpg)

![14fad2cffd6414f74a1e28606433f01](https://pic.leetcode-cn.com/1645497945-nauQdY-20220123_101412263_0.jpg)

* Python

```Python
# 一直向左子树走，每一次将当前节点保存到栈中
if root:
    stack.append(root)
    root = root.left
```

当前走到了最左面，弹出栈顶元素，加入结果数组中。

![c5c15ff152f441636ac06dfa1c823ee](https://pic.leetcode-cn.com/1645497945-UYKPOT-20220123_101447293_0.jpg)

* Python

```Python
if not root:
    cur = stack.pop()
    res.append(cur.val)
    root = cur.right
```

节点 2 并无右子树，继续重复上述动作。

![7d3fafb40bc7c31d9cf7f5cb5eb223b](https://pic.leetcode-cn.com/1645497945-BgibLO-20220123_101518426_0.jpg)

此时节点 0 有右子树，遍历其右子树，遍历到的节点入栈。

![f3df5524846a0b81b1e066ecb05a6e8](https://pic.leetcode-cn.com/1645497945-BXcJTx-20220123_101539993_0.jpg)

接下来的动作就是在重复上面的操作。

![160e51bad3105b76f796c3e284df16d](https://pic.leetcode-cn.com/1645497945-PNpuUM-20220123_101606163_0.jpg)

![81bdda43489bb428970513ad961226e](https://pic.leetcode-cn.com/1645497945-ijZoNh-20220123_101614382_0.jpg)

![ca7d4cc8a0754f5f41596e060f97449](https://pic.leetcode-cn.com/1645497945-KaOXUr-20220123_101620182_0.jpg)

![4b0df0aefa8691ba5457117a5786e56](https://pic.leetcode-cn.com/1645497945-TlxiPO-20220123_101629301_0.jpg)

直至 root 无指向而且栈为空，返回结果。

此解法，由于每个节点被遍历一次，所以**时间复杂度为 O(n)**。

额外维护了一个栈，**空间复杂度为 O(n)**。

## 代码实现

### Python 代码实现

* Python

```Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        # 注意：根节点为空，直接返回空列表
        if not root:
            return []

        stack = []
        res = []

        while root or stack:
            # 一直向左子树走，每一次将当前节点保存到栈中
            if root:
                stack.append(root)
                root = root.left
            # 当前节点为空，证明走到了最左边，从栈中弹出节点加入结果数组
            # 开始对右子树重复上述过程。
            else:
                cur = stack.pop()
                res.append(cur.val)
                root = cur.right

        return res
```

### Java 代码实现

* Java

```Java
class Solution {
  public List<Integer> inorderTraversal(TreeNode root) {
    if(root == null){
       return new int[] 
    }
    List<Integer> res = new ArrayList<Integer>();
    Stack<TreeNode> stack = new Stack<TreeNode>();
    while(stack.size() > 0 || root != null) {
      if(root != null) {
        stack.add(root);
        root = root.left;
      } 
      else {
        TreeNode cur = stack.pop();
        res.add(cur.val);
        root = cur.right;
      }
    }
    return res;
  }
}
```

## 写在最后

**如果你觉得有帮助到你，请给题解点个赞和收藏，让更多的人看到呀**

也欢迎你点击[**关注我**](https://gitee.com/codegoudan/codegoudanIMG/raw/master/202201/20220111_105721924_0.jpg)，解锁更多图解 LeetCode，一起玩转数据结构与算法！

我是帅蛋，我们下次见！

<br /> [**推荐阅读** 👍：ACM 选手带你玩转二叉树](http://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&amp;mid=2475925848&amp;idx=1&amp;sn=1fbe5454a7aebb14cca40ca424c8372d&amp;chksm=ff22c6d5c8554fc3feeb3e4e5480817bcd6e761cba65e9deed14609683b28685f86b59514a21&amp;scene=21#wechat_redirect)

[**推荐阅读** 👍：ACM 选手带你玩转二叉树前中后序遍历（递归版）](http://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&mid=2475926149&idx=1&sn=cc4d94f152d4bf7744422f567d1deb96&chksm=ff22c508c8554c1e2c2f8f966190ebad093253455293c040d60de5fbd996fca3f81190f32fa9&scene=21#wechat_redirect)

[**推荐阅读** 👍：ACM 选手带你玩转二叉树前中后序遍历（非递归版）](http://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&mid=2475926158&idx=1&sn=13e80ea80673e2a27be284cd98e3ed4a&chksm=ff22c503c8554c157f64fff0f101cbff5aefabf065ef4c1b0b661a16049f5cba91bc1642fd6b&scene=21#wechat_redirect)

[**推荐阅读** 👍：ACM 选手带你玩转时间复杂度和空间复杂度](http://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&mid=2475918746&idx=1&sn=3fe42234a1f07fb084d11fe06fb24893&chksm=ff22e217c8556b019b9052f9d4805174385ba4c8c099216fa226dbd1b033a9a49782579e4b75&scene=21#wechat_redirect)
